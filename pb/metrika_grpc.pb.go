// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: api/grpc/metrika.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MetrikaService_PushHitsToBQ_FullMethodName   = "/metrika.MetrikaService/PushHitsToBQ"
	MetrikaService_PushVisitsToBQ_FullMethodName = "/metrika.MetrikaService/PushVisitsToBQ"
	MetrikaService_GetCounters_FullMethodName    = "/metrika.MetrikaService/GetCounters"
)

// MetrikaServiceClient is the client API for MetrikaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetrikaServiceClient interface {
	PushHitsToBQ(ctx context.Context, in *PushLogRequest, opts ...grpc.CallOption) (*PushLogResponse, error)
	PushVisitsToBQ(ctx context.Context, in *PushLogRequest, opts ...grpc.CallOption) (*PushLogResponse, error)
	GetCounters(ctx context.Context, in *GetCountersRequest, opts ...grpc.CallOption) (*GetCountersResponse, error)
}

type metrikaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetrikaServiceClient(cc grpc.ClientConnInterface) MetrikaServiceClient {
	return &metrikaServiceClient{cc}
}

func (c *metrikaServiceClient) PushHitsToBQ(ctx context.Context, in *PushLogRequest, opts ...grpc.CallOption) (*PushLogResponse, error) {
	out := new(PushLogResponse)
	err := c.cc.Invoke(ctx, MetrikaService_PushHitsToBQ_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metrikaServiceClient) PushVisitsToBQ(ctx context.Context, in *PushLogRequest, opts ...grpc.CallOption) (*PushLogResponse, error) {
	out := new(PushLogResponse)
	err := c.cc.Invoke(ctx, MetrikaService_PushVisitsToBQ_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metrikaServiceClient) GetCounters(ctx context.Context, in *GetCountersRequest, opts ...grpc.CallOption) (*GetCountersResponse, error) {
	out := new(GetCountersResponse)
	err := c.cc.Invoke(ctx, MetrikaService_GetCounters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetrikaServiceServer is the server API for MetrikaService service.
// All implementations must embed UnimplementedMetrikaServiceServer
// for forward compatibility
type MetrikaServiceServer interface {
	PushHitsToBQ(context.Context, *PushLogRequest) (*PushLogResponse, error)
	PushVisitsToBQ(context.Context, *PushLogRequest) (*PushLogResponse, error)
	GetCounters(context.Context, *GetCountersRequest) (*GetCountersResponse, error)
	mustEmbedUnimplementedMetrikaServiceServer()
}

// UnimplementedMetrikaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMetrikaServiceServer struct {
}

func (UnimplementedMetrikaServiceServer) PushHitsToBQ(context.Context, *PushLogRequest) (*PushLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushHitsToBQ not implemented")
}
func (UnimplementedMetrikaServiceServer) PushVisitsToBQ(context.Context, *PushLogRequest) (*PushLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushVisitsToBQ not implemented")
}
func (UnimplementedMetrikaServiceServer) GetCounters(context.Context, *GetCountersRequest) (*GetCountersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCounters not implemented")
}
func (UnimplementedMetrikaServiceServer) mustEmbedUnimplementedMetrikaServiceServer() {}

// UnsafeMetrikaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetrikaServiceServer will
// result in compilation errors.
type UnsafeMetrikaServiceServer interface {
	mustEmbedUnimplementedMetrikaServiceServer()
}

func RegisterMetrikaServiceServer(s grpc.ServiceRegistrar, srv MetrikaServiceServer) {
	s.RegisterService(&MetrikaService_ServiceDesc, srv)
}

func _MetrikaService_PushHitsToBQ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetrikaServiceServer).PushHitsToBQ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetrikaService_PushHitsToBQ_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetrikaServiceServer).PushHitsToBQ(ctx, req.(*PushLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetrikaService_PushVisitsToBQ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetrikaServiceServer).PushVisitsToBQ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetrikaService_PushVisitsToBQ_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetrikaServiceServer).PushVisitsToBQ(ctx, req.(*PushLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetrikaService_GetCounters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCountersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetrikaServiceServer).GetCounters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetrikaService_GetCounters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetrikaServiceServer).GetCounters(ctx, req.(*GetCountersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetrikaService_ServiceDesc is the grpc.ServiceDesc for MetrikaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetrikaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "metrika.MetrikaService",
	HandlerType: (*MetrikaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushHitsToBQ",
			Handler:    _MetrikaService_PushHitsToBQ_Handler,
		},
		{
			MethodName: "PushVisitsToBQ",
			Handler:    _MetrikaService_PushVisitsToBQ_Handler,
		},
		{
			MethodName: "GetCounters",
			Handler:    _MetrikaService_GetCounters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/grpc/metrika.proto",
}
